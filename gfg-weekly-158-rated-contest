
   vector<int>adj[n+1];
        for(auto edge:edges)
        {
            adj[edge[0]].push_back(edge[1]);
             adj[edge[1]].push_back(edge[0]);
        }
        queue<pair<int,pair<int,int>>>q;
        q.push({1,{1,0}});
          vector<vector<int>>vis(n+1,vector<int>(3,0));
            vis[1][1]=1;
            while(q.size()!=0)
            {
                pair<int,pair<int,int>>p=q.front();
                  q.pop();
                  int parent=p.first;
                  int parent_oddcount=p.second.first;
                  int level=p.second.second;
                  if(parent==n)
                     return level;
                  for(auto child:adj[parent])
                  {
                     int present_oddcount=0;
                     if(child%2&&child>parent) 
                     present_oddcount=parent_oddcount+1;
                     else
                     {
                         if(child%2)
                         {
                             present_oddcount=1;
                         }
                     }
                     if(present_oddcount<=2&&vis[child][present_oddcount]==0)
                     {
                         vis[child][present_oddcount]=1;
                         q.push({child,{present_oddcount,level+1}});
                     }
                     
                  }
                  
            }
            return -1;
            
